*usr_02.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar
                                  译者: abliger
			    Vim 初步


本章提供使用 Vim 编辑文件的命令.不好也不快,但是足够你编辑文件.花时间练习这些命令,他们是接下来的基础.

|02.1|	第一次运行 Vim
|02.2|	插入文本
|02.3|	移动
|02.4|	删除字符
|02.5|	重做和恢复
|02.6|	其他编辑命令
|02.7|	退出
|02.8|	寻求帮助

下一章: |usr_03.txt|    移动
上一章: |usr_01.txt|    关于本手册
目录:   |usr_toc.txt|

==============================================================================
*02.1*	第一次运行 Vim

输入此命令启动 Vim: >

	gvim file.txt

无论 Unix 还是 Windos 都可以在终端中键入此命令. 无论任何哪种情况,Vim 都可以直接编辑 file.txt 文件. 因为他是一个新文件,你将会获得一个空白窗口.看起来像这样:

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [New file]			|
	+---------------------------------------+
		('#' 是光标位置.)

在此文件中颚化符(~)表示此行不存在.换句话说，当 Vim 没有显示的内容,它会显示颚化符.在屏幕底部,显示文件的名称和说明此为新建文件.  这个信息是暂时的，其他的信息可以覆盖它.


Vim 命令

gvim 命令会让编辑器创建一个新窗口题编辑.如果你使用这个命令: >

	vim file.txt

编辑信息会出现在你的命令窗口中.换句话说,如果你使用 xterm 运行命令,编辑器会只用你的 xterm 窗口.如果你使用 Windos 的命令提示符编辑信息会出现在当前窗口中.  在两个版本的窗口的文字看起来一样,但是使用 gvim 会有其他特性,如菜单栏.后面有更多描述.

==============================================================================
*02.2*	插入文本

Vim 是一个现代编辑器，它意味编辑器的行为与你所在的模式有关.有两个基本模式正常模式和插入模式.在正常模式，你键入的所有字符都是命令.在插入模式，所有的字符都会作为文本插入.
  当你进入 Vim 时，它会处于正常模式.而进入插入模式你需要键入 "i" 命令(i代表 Insert)。然后你就可以输入文本了。这些文本会插入到文件中。如果你犯了一个错误也不用担心，你可以在之后改正它.
输入下文的程序员打油诗，你可以这样敲:

	iA very intelligent turtle
	Found programming Unix a hurdle

随后键入 "turtle" ,使用 <Enter> 键到新行.最后使用 <Esc> 键停止插入模式并返回正常模式.现在你有了两行文本在你的 Vim 窗口中:

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


现在是什么模式?

要你所在模式可见,键入以下命令: >

	:set showmode

你可能注意到当你键入冒号时光标会转移到窗口的最后一行.那是你输入冒号命令(以冒号开始的命令)的地方.完成命令需要使用 <Enter> 键(冒号命令都需要以这种方法结束).现在,如果你键入 "i" 命令，在窗口底部，Vim将会显示 --INSERT--.表示你在插入模式.

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

如果你使用 <Esc> 返回正常模式最后一行将会变成空白.


摆脱麻烦

Vim 新手遇到的问题之一是模式混乱，可能时你忘记所处的模式或者不小心敲击转换模式的命令. 无论你在任何模式，返回正常模式使用 <Esc> 就可以了.有时你需要使用它两次.如果 Vim 发出 "嘀" 一声，你已经处于正常模式.

==============================================================================
*02.3*	Moving around

在你返回正常模式后,你可以使用这些键移动:

	h   向左						*hjkl*
	j   向下
	k   向上
	l   向右

首先,这些命令显得是随机挑选的.  毕竟,谁听说使用 l 代表右?但实际上这是有理由的:移动光标是在编辑器中最常做的，而这些键可以让你的右手直接按压.换句话说,这些命令在你最快输入它们的地方(特别是当你使用是个手指输入时).

	注意:
	你也能使用方向键移动光标.然而如果你这样做了，你的键入速度会大大降低.考虑一下你在一小时能可能会移动光标几百次，这会大大消耗你的时间.
	而且还有没有方向键的键盘，或者方向键放置在你不习惯的位置.因此，在这些情况下 hjkl 键的使用是很有帮助的.

记住这些命令的一个方法是:h在左边l在右边,j指着下面。用图表示如下: >

		       k
		   h     l
		     j

学习这些命令最好的办法就是去使用它们。使用 "i" 命令去插入多行文本.使用 hjkl 键去移动或插入单词.不要忘记使用 <Esc> 返回正常模式. |:Tutor| 也是练习的好方法.

==============================================================================
*02.4*	删除字符

删除一个字符需要移动光标覆盖它并键入 "x".  (这是对以前的打字机的一种回归，那时你通过在字符上输入 xxxx 删除它)移动光标到行首，例如,键入 xxxxxxx(七个 x)去删除 "A very ".结果看起来像这样:

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

现在你能插入新文本，例如键入: >

	iA young <Esc>

第一个字符启动插入模式(就是 i),插入 "A young",然后退出插入模式(结束 <Esc>).结果:

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


删除行

删除一行, 使用 "dd" 命令.下面的行会移上来填补空缺:

	+---------------------------------------+
	|Found programming Unix a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


删除换行符

在 Vim 你可以链接两行,这意味着此之间的换行符被删除."J" 命令完成此事.给出以下两行:

	A young intelligent ~
	turtle ~

移动光标到第一行键入 "J":

	A young intelligent turtle ~

==============================================================================
*02.5*	撤销和恢复

假如不小心删除多了.不要担心,你可以重新键入它,但是有更简单的方法存在."u" 命令恢复最近的编辑.查看这个操作:在使用 "dd" 删除第一行后,"u" 命令回滚上一个操作.
   再如: 移动光标到第一行的 A 字母:

	A young intelligent turtle ~

现在输入 xxxxxxx 删除 "A young"。结果如下: 

	intelligent turtle ~

键入 "u" 去恢复最近的删除. 删除命令最近删除的g字符，使用恢复命令恢复g字符.

	g intelligent turtle ~

下一个 "u" 恢复倒数第二个删除的字符:

	ng intelligent turtle ~

下一个 "u" 命令恢复u字符,如此类推:

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~

撤销

如果你撤销太多次,你可以使用 CTRL-R (redo)去回退前面的命令.换句话说, 它回退了回退.看起来像这样,使用 CTRL-R 两次. 字符A和空格就会消失:

	young intelligent turtle ~

撤销命令有一个特殊版本, "U"(撤销整行)命令.
撤销行命令会撤销在此行上的所有改变.键入该命令两次取消前面的 "U" 命令.

	A very intelligent turtle ~
	  xxxx				删除 very

	A intelligent turtle ~
		      xxxxxx		删除 turtle

	A intelligent ~
					使用 "U" 恢复整行
	A very intelligent turtle ~
					使用 "u" 撤销 "U"
	A intelligent ~

"U" 命令本身可以改变文本,"u" 撤销和 CTRL-R 恢复.可能令人困惑.不要担心，使用 "u" 和 CTRL-R 你可以去你编辑过的任意状态.更多请看章节|32.2|.

==============================================================================
*02.6*	其他编辑命令

Vim 有很多改变文本的命令.见 |Q_in| 和下面的内容.这里是一些经常用到的.

添加

"i" 命令在光标之前插入字符.一般情况下，这就够用了，但如果你刚好想在行尾加东西怎么办?对于这种情况你需要在光标之后插入字符.使用 "a"(附加)命令就可以了.
   例如改变这行:

	and that's not saying much for the turtle. ~
到
	and that's not saying much for the turtle!!! ~

移动光标到行尾的句号，然后键入"x"删除句号.光标现在处于行尾‘turtle’的字符e上.现在键入 >

	a!!!<Esc>

to append three exclamation points after the e in turtle:

	and that's not saying much for the turtle!!! ~


开始一个新行

"o" 命令时在光标下创建一个新的空白行并打开 Vim 的插入模式.然后你可以在新行中输入文本.
   假定你的光标在下面两行中第一行的某个地方:

	A very intelligent turtle ~
	Found programming Unix a hurdle ~

如果你使用 "o" 命令键入下面的文字:

	oThat liked using Vim<Esc>

结果是:

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming Unix a hurdle ~

"O" 命令(大写)在光标上方新建新行.

指定计数

如果你想要光标移动九行.你可能会键入 "kkkkkkkkk" 或者你能输入命令 "9k".实际上,你能在很多命令前添加数字.
列如在本文前面提到了行尾添加了三个感叹号 "a!!!<Esc>".另外的方式使用命令 "3a!<Esc>".数量 3 告诉命令执行三次.同样的，删除三个字符，使用命令 "3x".计数总要放在引用的命令前面.

==============================================================================
*02.7*	退出

退出可以使用 "ZZ" 命令.这个命令会保存文件并退出.

	注意:
	不向其他编辑器，不会自动备份文件.如果你使用 "ZZ",你的修改将会提交且不能找回.你可以配置Vim去生成备份文件;见 |07.4|.

放弃修改

有时你会做了一系列的修改才突然发现还不如编辑之前.不要担心;Vim 有放弃修改并退出命令.它就是:

	:q!

使用 <Enter> 结束此命令.

如果你对细节感兴趣，此命令有三部分： 冒号 (:)，它使 Vim 进入命令行模式;q 命令时 Vim 的退出命令，感叹号是强制命令修饰符.强制命令修饰符是必须的，它迫使Vim放弃文件的修改.如果只键入 ":q",Vim 会显示错误信息并拒绝退出:

	E37: No write since last change (use ! to override) ~

通过指定强制执行，你实际上在告诉 Vim: "我知道这样做看起来很傻,到那时我真的想要这样做."如果你想要继续使用 Vim 编辑:":e!" 命令可以重新装载原来的文件.

==============================================================================
*02.8*	寻求帮助

你想要知道的事情都可以在 Vim 帮助文件中找到答案.随便问!

如果你知道你要找什么, 使用 Vim 的帮助会更简单的找到答案，而不是使用谷歌.因为所有主题符合一定的风格指导.

帮助的另一个优点是对应于你特定的 Vim 系统。你不会看到之后加入的命令的帮助。这对你用不上.

要获得一般的帮助，用这个命令: >

	:help

你也能使用第一个功能键 <F1> .如果你的键盘有 <Help> 键它可能也能工作.
如果你不指定一个主题,":help" 显示综合帮助窗口.
Vim 的作者在帮助系统方面使用了一个很聪明的方案 (也许可以说是很懒惰的方案): 它们使用一个普通的编辑窗口来显示帮助.你可以在帮助系统中使用所用的普通命令.因此 h, j,k,和l 还是表示左，下，上和右.

离开帮助窗口和离开编辑器的指令是相同的: "ZZ".它只能关闭窗口不能退出 Vim.

当你读帮助文档时，你可能注意到一些文本使用竖线包裹起来.(例如|帮助|). 它表示一个超链接.如果你的光标在两个竖线之间并使用 CTRL-] (标签跳转命令),帮助系统会打开该链接. (至于原因不在这里讨论,Vim对于超链接的术语时标签.所以 CTRL-] 跳转到给定光标下的单词的标签地址.)

进行了一些跳转后，你可能想要回去.CTRL-T (标签退栈)把你送回前一个跳转点.CTRL-O (跳转到前一个位置)也能完成相同的功能.

在帮助系统的顶部,有着 *help.txt* 标记.在"*" 字符中间的名字被帮助系统用来定一个标签(也就是超级链接的目标).
   见 |29.1| 详细介绍了使用标签的细节.

要获得特定主题的帮助，使用如下命令: >

	:help {subject}

获得 "x" 命令的帮助,例如输入下面的命令: >

	:help x

找到怎样删除文本，使用这个命令: >

	:help deleting

获得所有命令的索引,使用下面的命令: >

	:help index

当你需要包含控制字符命令(例如,CTRL-A)时, 你需要使用 "CTRL-" 去拼写它. >

	:help CTRL-A

Vim 编辑器有很多不同的模式.帮助系统默认为正常模式.例如,接下来的命令展示正常模式的 CTRL-H 命令: >

	:help CTRL-H

要表示其他模式需要使用模式前缀.如果你想要寻找插入模式的命令帮助，使用 "i_". 例如对于 CTRL-H 你可以使用下面的命令: >

	:help i_CTRL-H

当你启动 Vim，你可以使用一些命令行参数.这些参数以短横线开头 (-)。例如知道要 -t 这个参数是干什么用的,例如使用这个命令: >

	:help -t

Vim 编辑器有大量的选项使你能够配置定制它.如果你想要获得选项的帮助，你需要使用单引号包裹住它.列如,需要查找'number'选项，可以使用下面的例子: >

	:help 'number'

面有所有模式的前缀列表: |help-summary|.

特殊键以尖括号包围.例如插入模式中的向上方向键的帮助, 使用此命令: >

	:help i_<Up>

如果你看到了你不懂的错误信息，例如:

	E37: No write since last change (use ! to override) ~

你可以使用错误 ID 在帮助中查找它: >

	:help E37


总结: 						*help-summary*  >

1) 键入主题后用 Ctrl-D 让 Vim 显示所有的可用主题。也可按 Tab 来补全: >
        :help some<Tab>
<    关于如何使用 help 的详情: >
        :help helphelp

2) 跟随竖杠之间的链接转到相关帮助。可从详细帮助转到用户文档，这里的一些命令解释更加贴近用户，而不过于繁琐。例如: >
        :help pattern.txt
<        之后，你可以看看用户指南主题 |03.9| 和 |usr_27.txt| 相关的介绍。

3) 选项以单引号包围。如要转到 list 选项的帮助主题:   >
        :help 'list'
<    如果你只知道你想找某个选项，也可用:  >
        :help options.txt
<    来打开描述所有选项处理的帮助页面，然后用正规表达式搜索，如 textwidth。
    若干选项有自己的命名空间，例如: >
        :help cpo-<letter>
<    可查找 'cpoptions' 设置的相关标志位，把 <letter> 替代为特定的标志位，如: >
        :help cpo-;
<    而要查 guioption 的标志位: >
        :help go-<letter>

4) 普通模式命令没有前缀。如要转到 "gt" 命令的帮助页面: >
        :help gt

5) 插入模式命令以 i_ 开始。如关于删除单词的帮助: >
        :help i_CTRL-W

6) 可视模式命令以 v_ 开始。如跳转到可视区域另一边的帮助: >
        :help v_o

7) 命令行编辑和参数以 c_ 开始。如使用命令行参数 % 的帮助: >
        :help c_%

8) Ex-命令总是以 ":" 开始，如要转到 ":s" 命令的帮助: >
        :help :s

9) 专门用于调试的命令以 ">" 开始。如要转到 "cont" 调试命令的帮助: >
        :help >cont

10) 键组合。通常以指示要使用的模式的单个字母开始。例如: >
        :help i_CTRL-X
<    带你到插入模式下的 CTRL-X 命令的家族，可用于自动补全不同的事物。注意，一
    些特定的键总是以相同的方式书写，如 Control 总写作 CTRL。
    普通模式命令没有前缀，相关主题可用 :h CTRL-<Letter> 找到，如 >
        :help CTRL-W
<     与之作对比 >
        :help c_CTRL-R
<     描述 CTRL-R 在命令行上输入命令时的行为，而 >
        :help v_CTRL-A
<     讲述可视模式下数值的增量，而 >
        :help g_CTRL-A
<     讲述 "g<C-A>" 命令 (例如，你要先按 "g" 再按 <Ctrl-A>)。
    这里 "g" 代表普通命令 "g"，它总期待按下第二个键后才能做事，"z" 开始的命令
    也类似。

11) 正规表达式项目总是以 / 开始。如要得到 Vim 正规表达式的 "\+" 量词的帮助: >
        :help /\+
<     如果你需要知道所有关于正规表达式的情况，从这里开始: >
        :help pattern.txt

12) 寄存器总是以 "quote" 开始。如要了解特殊的 ":" 寄存器: >
        :help quote:

13) Vim 脚本可见 >
        :help eval.txt
<     :h expr-X 描述语言的方方面面，其中 "X" 是单个字母。如 >
        :help expr-!
<     会带你到描述 VimScript 中 "!" (取非) 操作符的主题。
    同样重要 >
        :help function-list
<     提供所有可用函数的简短描述。Vim 脚本函数的帮助主题总包含 "()"，如: >
        :help append()
<     讲述 Vim 脚本的 append 函数，而不是如何在当前缓冲区内附加文本。

14) 帮助页面 :h  map.txt  讲到映射。用 >
        :help mapmode-i
<     来查找  :imap  命令。另 :map-topic 可用来查找关于映射的特定子主题，如: >
        :help :map-local
<     说明缓冲区局部的映射，或 >
        :help map-bar
<     说明如何在映射中处理 '|'。

15) :h command-topic 讲述命令的定义，所以用 >
        :help command-bar
<     可以了解关于自定义命令的 '!' 参数。

16) 窗口管理命令总是以 CTRL-W 开始，用 :h CTRL-W_letter 可以找到相应的帮助。
    如 >
        :help CTRL-W_p
<     说明如何移动到上次访问过的窗口。也可访问 >
        :help windows.txt
<     如果你在寻找窗口处理的命令，请仔细阅读。

17) 用  :helpgrep  在所有帮助页面中进行搜索 (包括已安装的插件)。用法见
     :helpgrep 。要搜索某主题: >
        :helpgrep topic
<     带你到首个匹配处。要到下一个: >
        :cnext
<     快速修复窗口包含所有的匹配，可以这样打开: >
        :copen
<     先移到你要的匹配，按 Enter 跳转到该帮助。

18) 用户手册。以初学者友好的方式描述帮助主题。 usr_toc.txt  可以找到目录 (你可
    能猜到了)，就从这里开始吧: >
        :help usr_toc.txt
<     粗略看看内容，找找感兴趣的主题。如 "二合字母" 和 "插入特殊字符" 项目出现
    在第 24 章，所以要转到该帮助页面: >
        :help usr_24.txt
<     另外要访问帮助中的特定章节，可以这样直接访问章节号: >
        :help 10.1
<     会转到  usr_10.txt  的第 10.1 章，那里讲述记录宏。

19) 高亮组。总是以 hl-groupname 开始。如 >
        :help hl-WarningMsg
<     讲述 WarningMsg 高亮组。

20) 语法高亮使用命名空间 :syn-topic。如 >
        :help :syn-conceal
<     讲述 ":syn" 命令的 conceal 参数。

21) 快速修复命令通常以 :c 开始，而位置列表命令通常以 :l 开始

22) 自动命令事件可用其名字查找: >
        :help BufWinLeave
<     要列出所有可能的事件: >
        :help autocommand-events

23) 命令行开关总是以 "-" 开始。如关于 Vim 的 -f 命令开关的帮助，可用: >
        :help -f

24) 可选的特性总是以 "+" 开始。如了解 conceal 特性，可用: >
        :help +conceal

25) 关于系统包含的文件类型的特定功能的文档，通常所在位置的形式是
    ft-<文件类型>-<功能>。如 >
        :help ft-c-syntax
<     讲述 C 语法文件和它提供的选项。有时，全能补全有自己的段落 >
        :help ft-php-omni
<     文件类型插件也是如此，如 >
        :help ft-tex-plugin
<     可以参考。

26) 错误和警告代码可在帮助中直接查找。这样 >
        :help E297
<     准确地带你到交换错误信息的描述，而 >
        :help W10
<     讲述警告 "Changing a readonly file"。
    不过，有时这些错误代码没有相应描述，而是和通常产生该错误的 Vim 命令列在一
    起。如: >
        :help E128
<     带你到  :function  命令

==============================================================================

下一章: |usr_03.txt|  移动

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
