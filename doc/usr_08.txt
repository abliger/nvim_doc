*usr_08.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar
				  译者: abliger
			     分割窗口 


查看两个不同的文件.或同时查看同一文件的不同位置.并排放置两个文件去观察其不同.上述的一切都能通过分隔窗口实现.

|08.1|	分隔窗口
|08.2|	在其他文件上分隔窗口
|08.3|	窗口大小
|08.4|	竖直分隔
|08.5|	移动窗口
|08.6|	对所有窗口执行命令
|08.7|	使用比较模式查看不同
|08.8|	杂项
|08.9|	标签页

下一章: |usr_09.txt|  使用GUI
上一章: |usr_07.txt|  编辑更多文件
目录:   |usr_toc.txt|

==============================================================================
*08.1*	分隔窗口

最简单打开一个新窗口的方式是使用下面的命令:

	:split

这个命令分开屏幕去显示两个窗口且光标放置到上面的窗口:

	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

你可以看到同文件的两个窗口. 带有 "====" 的行是状态行.它会显示它上边窗口的信息.(实际上状态行会反色显示.)
   这连个窗口允许你查看同文件的不同部分.例如,你可以让上面的窗口展示程序的变量声明部分，下面的展示使用那些变量的代码.
CTRL-W w 命令能在窗口间跳转.如果你在上面的窗口, CTRL-W w 命令会跳转到下面的窗口.如果你在下面的窗口它会跳转到上面的窗口.(CTRL-W CTRL-W 使用两次也做一样的事,放置你离开 CTRL-W 晚了.)

关闭窗口

关闭窗口使用下面的命令: >

	:close

实际上，任何退出编辑的命令皆可，如 ":quit" 和 "ZZ".但是 ":close" 会防止你在只剩下一个窗口时退出Vim.

关闭其他窗口

如果你打开了很多窗口,但是现在只关注其中的一个，下面的命令会很有用:

	:only

这会除当前窗口外关闭所有窗口.如果其他窗口没有保存,会得到错误然后那个窗口不会关闭.

==============================================================================
*08.2*	在其他文件上分隔窗口

下面的命令打开第二个窗口并编辑给定的文件:

	:split two.c

如果你在编辑one.c，结果看起来是这样:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

使用窗口编辑空文件: >

	:new

你可以重复使用":split"和":new"命令，创建任意数量的窗口.

==============================================================================
*08.3*	窗口大小

":split" 命令有数量前缀.如果指定了，它会是新窗口的高度.例如,下面打开一个三行高度的可编辑窗口文件 alpha.c: >

	:3split alpha.c

对于已存在的窗口，你可以使用很多方式改变大小.如果你有鼠标, 可以这样做:移动鼠标到分割窗口的状态,点击它上下移动.（注意设置 set mouse=a ）

增加窗口大小: >

	CTRL-W +

减小它: >

	CTRL-W -

这些命令都可以代数字前缀，使之能增加减小多行窗口大小.如 "4 CTRL-W +" 会使窗口变高4行.

设置窗口变为指定高度:

	{height}CTRL-W _

他是由: 一个数字 {height}, CTRL-W和下划线组成 (使用减号加shift键入).
  要把一个窗口扩展到尽可能大，可以使用无计数前缀的 CTRL-W _ 命令.


使用鼠标

在 Vim 中，你可以用键盘很快完成很多工作。但很不幸，改变窗口大小要敲不少键。在这种情况下，使用鼠标会更快一些。把鼠标指针移到状态条上，按住左键并拖动。状态条会随之移动，这会使一个窗口更大一个更小.


选项

'winheight' 选项设置最小的期望窗口高度而 'winminheight' 选项设置最小的 "硬性"高度。
同样，'winwidth' 设置最小期望宽度而 'winminwidth' 设置最小硬性宽度。'equalalways' 选项使所有的窗口在关闭或者打开新窗口的时候总保持相同大小。

==============================================================================
*08.4*	竖直分隔
 >
":split" 命令能在当前窗口上创建新窗口.使窗口出现在左边,使用: >

	:vsplit

或者: >
	:vsplit two.c

结果如下:

	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+

事实上, 这个中间的竖线会反色显示. 这就是垂直分割线.他从左右分开两个窗口.

也可以使用 ":vnew" 命令,在左边创建空白文件窗口.或者写全命令:

	:vertical new

":vertical" 命令可以放在任何分割窗口的命令的前面。这会在分割窗口的时候用垂直分割取代水平分割。(如果命令不分割窗口，这个前缀不起作用)

窗口间跳转

由于你可以用垂直分割和水平分割命令打开任意多的窗口，你就几乎能够任意设置窗口的布局。接着，你可以用下面的命令在窗口之间跳转:

    CTRL-W h	跳转到窗口左边
    CTRL-W j	跳转到窗口下边
    CTRL-W k	跳转到窗口上边
    CTRL-W l	跳转到窗口右边

    CTRL-W t	跳转到最上边的窗口
    CTRL-W b	跳转到底部的窗口

你可能已经注意到这里使用移动光标一样的命令用于跳转窗口。如果你喜欢，改用方向键也行。
  还有其它命令可以跳转到别的窗口，参见: |Q_wi|.

==============================================================================
*08.5*	移动窗口

你已经分割了一些窗口，但现在的位置不正确。这时，你需要一个命令用于移动窗口.例如, 你有三个窗口长成这样:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

能清楚的看到最后的文件应放到顶部.选中那个窗口(使用 CTRL-W w)使用下面的命令

	CTRL-W K

使用大写字母K.这样窗口将被移到最上面。你可以注意到，这里又用 K 表示向上移动了.
   当你竖直分隔窗口, CTRL-W K会移动当前窗口到顶部然后使它占满 Vim 窗口的全部宽度.如果原来长这样:

	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+

在中间窗口（three.c）使用 CTRL-W K后的结果为:

	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+

还有三个相似的命令 (估计你已经猜出来了):

    CTRL-W H	移动窗口到左边
    CTRL-W J	移动窗口到下面
    CTRL-W L	移动窗口到右边

==============================================================================
*08.6*	对所有窗口执行命令

当你有了一些打开的窗口然后你想要退出Vim,你可以分别关闭每一个窗口. 更快的方法是:

	:qall

它代表"quit all".如果任意窗口的内容没有保存,Vim就不会退出.同时光标会自动跳到那个窗口，你可以用 ":write" 命令保存该文件或者 ":quit!" 放弃修改.
  如果你知道有窗口被改了，而你想全部保存，则执行如下命令:

	:wall

它代表 "write all".但实际上, 它只保存发生改变的文件 Vim 知道保存一个没有修改过的文件是没有意义的.
  由 ":qall" 和 ":wall" 组成的 "write and quit all" 命令:

	:wqall

它会保存所有修改的文件并退出Vim.
  最后，这个命令退出Vim不保存修改:

	:qall!

注意，这个命令是不能撤销的!


为所有的参数打开窗口

要让 Vim 为每个文件打开一个窗口，可以使用 "-o" 参数:

	vim -o one.txt two.txt three.txt

结果时:

	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+

"-O" 参数可以获得竖直窗口.
   当Vim已经打开,":all"命令会为文件列表的每一个文件打开窗口.":vertical all"以垂直分割的方法打开窗口.

==============================================================================
*08.7*	使用比较模式查看不同

想要比较两个文件的不同点，由一种特殊的方式启动 Nvim.打开 "main.c" 插入一些字符. 打开 'backup' 选项保存文件,备份文件 "main.c~" 会保留文件的上一个版本.使用下面命令以比较模式打开 Nvim:

	nvim -d main.c~ main.c

Vim 会用垂直分割的方式打开两个文件。你只能看到你修改过的地方和上下几行的地方.

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- fold
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- changed line
	|  text		     |	text		  |
	|  text		     |	------------------|  <- deleted line
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- fold
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(这幅图没有显示出高亮效果,实际更好)

那些没有修改的行会被折叠成一行，这称为 "关闭的折叠" (closed fold)。上图中由 "<- fold" 标记的行就是一个用一行表示 123 行的折叠。这些行在两个文件中完全相同。 
  标记为 "<- changed line" 被高亮显示，而增加的行被用另一种颜色表示。这可以很 清楚地表示出两个文件间的不同. 
  被删除的行在 main.c窗口中用 "---" 显示，如图中用 "<- deleted line" 标记的行。 这些字符并不是真的存在。它们只是用于填充 main.c，以便与另一个窗口对齐.


折叠行

每个窗口的左侧都有一个列，其背景略有不同.图中标识为 "VV"。你会发现每个折叠在那个位置都有一个加号。把鼠标移到那里并按左键可以打开那个折起，从而让你看到里面的内容.
  对于打开的折叠，折叠栏上会出现一个减号。如果你单击那个减号，折叠会被重新关闭.
  当然，这只能在你有鼠标的情况下使用。如果你没有，可以用 "zo" 打开一个折叠。关闭使用 "zc".


用 Vim 做比较

启动比较模式的另一种方法从 Vim 内部开始: 编辑 "main.c" 文件，然后分割窗口显示区别:

	:edit main.c
	:vertical diffsplit main.c~

":vertical" 命令使窗口用垂直的方式分割。如果你不写这个命令，结果会变成水平分割.

如果你有一个当前文件的补丁或者 diff 文件，你可以用第三种方法启动比较模式: 先编辑这个文件，然后告诉 Vim 补丁文件的名称:

	:edit main.c
	:vertical diffpatch main.c.diff

警告: 补丁文件中必须仅包括为一个目标文件所做的补丁，否则你可能会得到一大堆错误信息。还可能有些你没打算打补丁的文件也被打了补丁。补丁功能只改变内存中的文件备份，不会修改你硬盘上的文件 (除非你决定写入改动).


滚动绑定

当文件中有很多改动时，你可以正常滚动屏幕。Vim 会尽可能保持两个文件对齐，以便你可以并排看到文件的区别。
如果暂时想关闭这个特性，使用如下命令:

	:set noscrollbind


跳转到修改的地方

如果你通过某种方法取消了折叠功能，可能很难找到有改动的地方。使用如下命令可以跳转到下一个修改点: >

	]c

反向跳转: >

	[c

加上一个计数前缀可以跳得更远.


消除差异

你可以把文本从一个窗口移到另一个，并以此来消除差异，或者为其中一个文件中增加几行。Vim 有时可能无法及时更新高亮显示。要修正这种问题，使用如下命令: >

	:diffupdate

要消除差异，你可以把一个高亮显示的块从一个窗口移动到另一个窗口。以上面的"main.c" 和 "main.c~" 为例，把光标移到左边的窗口，在另一个窗口中被删除的行的位置，执行如下命令: >

	dp

这将把文字从左边拷到右边，从而消除两边的差异。"dp" 代表 "diff put"。
你也可以反过来做: 把光标移到右边的窗口，移到被 "改动" 了的行上，然后执行如下命令: >

	do

把文本从左边拷到右边，从而消除差异。由于两个文件已经没有区别了，Vim 会把所有文字全部折叠起来。"do" 代表 "diff obtain"。本来用 "dg" (diff get) 会更好。可是它已经有另外的意思了 ("dgg" 删除从光标为止到首行的所有文本).

关于比较模式, 详见 |diff-mode|.

==============================================================================
*08.8*	杂项

'laststatus' 选项用于指定什么时候对最后一个窗口显示状态条:

    0	永远不
    1	只有用分割窗口的时候 (默认)
    2	总是
    3	在底部有一个全局状态线，而不是每个都有一个窗口

很多编辑另一个文件的命令都有一个使用分割窗口的变体。对于命令行命令，这通过前置一个 "s" 实现。例如 ":tag" 用来跳到一个标记，"stag" 就会分割出一个新窗口并跳到那个标记。
  对于普通模式，前置一个 CTRL-W 可以完成这个功能。例如，CTRL-^ 跳到轮换文件，而 CTRL-W CTRL-^ 打开一个新窗口并编辑轮换文件.

'splitbelow' 选项可以让新的窗口出现在当前窗口的下面。'splitright' 选项让垂直分割的窗口出现在当前窗口的右边。

打开一个新窗口时可以在命令前加上一个修饰符说明新窗口应该出现在什么地方:

    :leftabove {cmd}	当前窗口的左上方
    :aboveleft {cmd}	同上
    :rightbelow {cmd}	当前窗口的右下方
    :belowright {cmd}	同上
    :topleft {cmd}		Vim窗口的最上方或最左边
    :botright {cmd}		Vim窗口的最下方或最右方

==============================================================================
*08.9*	标签页

你会注意到窗口绝不会重叠.这意味着屏幕空间很快会用完。这个问题的解决方法叫做标签页.

假设你编辑 "thisfile".  使用此命令创建新的标签页: >

	:tabedit thatfile

这会在一个窗口中编辑文件 "thatfile"，这个窗口会占满整个 Vim 窗口。你会注意到在顶部有一个含有两个文件名的横条:

	+----------------------------------+
	| thisfile | /thatfile/ __________X|    (thatfile is bold)
	|/* thatfile */			   |
	|that				   |
	|that				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

现在你有两个标签页. 第一个是文件 "thisfile" 的窗口，第二个是文件 "thatfile" 的窗口。这就像是两张重叠的纸，它们所带的的标签露在外面，显示其文件名.

现在，使用鼠标单击顶端的 "thisfile"。结果是

	+----------------------------------+
	| /thisfile/ | thatfile __________X|    (thisfile is bold)
	|/* thisfile */			   |
	|this				   |
	|this				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

你可以通过单击顶端的标签切换标签页。如果没有鼠标或者不想用它，可以使用 "gt" 命令。助记符: Goto Tab。

现在，让我们通过下面的命令建立另一个标签页: >

	:tab split

这会建立一个新的标签页，包含一个窗口，编辑和刚才所在窗口中的缓冲区相同的缓冲区:

	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X|   (thisfile is bold)
	|/* thisfile */			      |
	|this				      |
	|this				      |
	|~				      |
	|~				      |
	|~				      |
	|				      |
	+-------------------------------------+

在任何打开窗口的 Ex 命令前面，你都可以放上 ":tab"。这个窗口在新标签页中打开。另一个例子: >

	:tab help gt

它将在新的标签页中显示关于 "gt" 的帮助

使用标签页可以完成更多的工作:

- 在末尾标签后面的空白处单击鼠标
选择下个标签页，同 "gt"。

- 在右上角的 "X" 处单击鼠标
关闭当前标签页，除非当前标签页中的改变没有保存。

- 在标签行上双击鼠标
建立新标签页。

- "tabonly" 命令
关闭除了当前标签页以外的所有标签页，除非其它标签页中的改变没有保存。

详见 |tab-page|.

==============================================================================

下一章: |usr_09.txt|  使用GUI

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
