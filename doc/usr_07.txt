*usr_07.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar

			  编辑更多文件


无论你有多少个文件，你都可以同时编辑它们而不需要退出 Vim。本章介绍如何定义一个文件列表，并基于这个列表工作，或者从一个文件跳转到另一个文件，又或者从一个文件中拷贝文字，并写入到另一个文件中.

|07.1|	编辑其他文件
|07.2|	文件列表
|07.3|	文件跳转
|07.4|	备份文件
|07.5|	在文件中相互拷贝
|07.6|	查看文件
|07.7|	改变文件名

下一章: |usr_08.txt|  分割窗口
上一章: |usr_06.txt|  使用语法高亮
目录:   |usr_toc.txt|

==============================================================================
*07.1*	编辑其他文件

到目前位置，你必须为你想要编辑的每一个文件启动 Vim.有一种简单的方式去直接编辑其他文件，使用这个命令: >

	:edit foo.txt

你能使用任意文件名代替 "foo.txt".Vim 会关闭当前文件并打开它.如果当前文件有未保存的内容，Vim 发出错误信息且不打开新文件: 

	E37: No write since last change (use ! to override) ~

	注意:
	Vim 会在每一个错误信息前放置错误 ID.如果你不懂什么造成了这个消息，可以使用帮助系统搜索这个 ID，如: >

		:help E37

此时你有多个解决方案。首先你可以通过如下命令保存当前文件: >

	:write

你可以强制让 Vim 丢弃改变内容并打开新文件，使用强制字符: >

	:edit! foo.txt

如果你要编辑其他文件,但目前不在当前文件保存，你可以使它隐藏: >

	:hide edit foo.txt

改变的文本依然在那，但是你不能看到它. 深入解释见|22.4|: 缓存区列表.

==============================================================================
*07.2*	文件列表

你可以使用 Vim 编辑文件序列.例如: >

	vim one.c two.c three.c

这个命令启动 Vim 并告诉它会编辑三个文件.Vim 只能展示第一个文件.在你编辑完此文件后你可以使用这个命令到下一个文件:

	:next

如果你未保存当前文件，你会得到一个错误并且 ":next" 无效.这和上面提到的 ":edit" 是一样的.放弃改变: >

	:next!

但是最可能的是你想要保存改变并跳转到下一个文件，下面的命令特别适合: >

	:wnext

这和使用下面两个命令是一样的: >

	:write
	:next

我在哪？

去查看你正编辑的文件在参数列表的位置,可以看一下窗口标题.它应该会展示一些像 "(2 of 3)" 的内容.意思是在你正编辑的三个文件的第二个.
   如果你想要查看文件列表,使用命令: >

	:args

这是 "arguments" 的缩写.输出如下:

	one.c [two.c] three.c ~

这里列出所有你启动 Vim 时指定的文件。你正在编辑的那一个，例如，"two.c"，会用中括号括起.

移动到另一个参数

返回第一的文件: >

	:previous

这就像 ":next" 命令, 只不过它反方向移动. 同样保存移动使用: >

	:wprevious

移动到列表的最后一个: >

	:last

再次移动到第一个文件: >

	:first

不过，没有 ":wlast" 或者 ":wfirst" 命令!

你能在 ":next" 和 ":previous" 添加数字前缀.向前跳转两个文件: >

	:2next

自动保存

当移动文件和编辑文件时，你需要记得使用 ":write".否则你会得到错误信息.如果你确保你总是想要保存修改文件，你可以让 Vim 自动保存它们: >

	:set autowrite

当你编辑不想要保存修改的文件时，你可以使用关闭它: >

	:set noautowrite

编辑文件列表

你不需要退出 Vim 就可以重定义文件列表并再次启动它. 使用此命令编辑其他的三个文件: >

	:args five.c six.c seven.h

或使用通配符, 就像在命令行中: >

	:args *.txt

Vim 会打开列表中第一个文件.同样地，如果当前文件没有保存，你需要保存它，或者使用 ":args!" (加了一个 !) 放弃修改.

你编辑过最后一个文件吗?

							*arglist-quit*
当你使用文件列表, Vim 会认为你想要编辑它们所有的文件.防止你提前退出, 在你还没有编辑到列表最后一个文件时会提示错误:

	E173: 46 more files to edit ~

如果你真地想要退出，可以在退出一次.但如果在两个命令间还执行了其它命令就无效了.

==============================================================================
*07.3*	文件跳转

使用 CTRL-^ 快速在文件间跳转(在数字键 6 上).例如: >

	:args one.c two.c three.c

现在你在 one.c 文件中 >

	:next

现在你在 two.c 中.使用 CTRL-^ 返回到 one.c.同样地再使用 CTRL-^ 也能返回到 two.c.再使用 CTRL-^ 再次返 回 one.c.如果你现在执行: >

	:next

现在到了文件 three.c.注意 CTRL-^ 命令不会改变你在文件列表的位置.只有如 ":next" 和 ":previous" 的命令可以.

如果先前你编辑过叫做 "alternate" 的文件.当你启动 Vim，CTRL-^ 无效, 此时没有轮换文件.


预定标记

跳转到其他文件后，有两个非常有用的预定标记: >

	`"

这个标记会带你到上次你离开前的位置，另一个标记是你最后一次改变的位置: >

	`.

假设你在编辑 "one.txt". 有时你中途使用 "x" 在文件中删除了一个字符.然后你使用 "G" 到了文件尾，使用 ":w" 保存文件.编辑了几个其他文件后再使用 ":edit one.txt" 返回到 "one.txt".现在你使用 `" Vim 跳转到文件尾.使用 `. 跳转到删除字符的位置.即使你在文件中移动过，但在你修改或者离开文件前，这两个标记都不会改变.


文件标记

在章节 |03.10| 介绍了如何在文件中使用 "mx" 放置一个标记并使用 "`x" 跳转到该位置.它只能在一个文件中使用.如果你在编辑其他文件并放置了标记，那么标记只能在那个文件中使用.因此每一个文件都有一个自己的标记集，并只能在该文件中使用.
   到此为止我们都使用小写 字母标记.标记也能使用大写字母.这种标记是全局的，它们可以在任何文件中使用.例如假设我们正编辑 "foo.txt".在文件中间("50%")放置 F 标记(F for foo): >

	50%mF

之后编辑 "bar.txt"，在最后放置 B 标记 (B for bar):
>
	GmB

现在使用 "'F" 命令去跳转到 foo.txt 的中间. 或者编辑其他文件键入 "'B" 跳转到 bar.txt 文件尾.

文件标记会被一直记住直到被重新定义.这样，你可以在一个文件中留下一个标记，然后任意做一段时间的编辑，最后用这个标记跳回去.
   让文件标记符和对应的位置建立一些关系常常是很有用的。例如，用 H 表示头文件  (Head File)，M 表示 Makefile 和 C 表示 C 的代码文件.

要知道一个标记在什么地方，在 ":marks" 命令中加上标记名作为参数即可: >

	:marks M

你也能给出一些参数: >

	:marks MCP

别忘了你还可以 CTRL-O 和 CTRL-I 在整个跳转序列中前后跳转.

==============================================================================
*07.4*	备份文件

通常 Vim 不会产生备份文件.如果你希望的话，执行如下命令就可以了: >

	:set backup

备份文件的名字是原文件名结尾加上 ~.如果你的文件名是 data.txt,备份文件的名字是 data.txt~.
   如果你不想让备份文件结尾加 ~,你也能修改后缀: >

	:set backupext=.bak

它会使用 data.txt.bak 代替 data.txt~.
   其他的相关选项是 'backupdir'.它指定备份文件的目录。默认情况是与原始文件的路径一致，这在很多情况下都是合适的.

	注意:
	当 'backup' 选项没有设置但是 'writebackup' 设置了,Vim 也会创建备份文件。但是,在文件编辑完后，这个备份文件会被自动删除。这个功能用于避免发生异常情况导致没有存盘 (磁盘满是最常见的情况；被雷击也是一种情况，不过很少发生).


保留原始文件

如果你在编辑源程序，你可能想在修改之前保留一个备份。但备份文件会在你存盘的时候被覆盖。这样它只能保留前一个版本，而不是最早的文件。
   让 Vim 保存原始文件，需要设置 'patchmode' 选项.这个选项定义需要改动文件的第一个备份文件的扩展名.你可以这样做: >

	:set patchmode=.orig

这样，当你第一次编辑 data.txt，作了修改并执行存盘，Vim 会保留一个名为 "data.txt.orig" 的原始文件.
  如果你接着修改这个文件，Vim 会发现这个原始文件已经存在，并不再覆盖它。进一步的备份就存在 "data.txt~" (或者你设置的 'backupext' 指定的文件) 中。
  如果你让 'patchmode' 设为空 (这是默认的情况)，则原始文件不会被保留。

==============================================================================
*07.5*	在文件中相互拷贝

本节解释如何在文件间拷贝文本。我们从一个简单的例子开始。编辑一个你要拷贝文本的文件，把光标移到要拷贝的文本的开始处，用 "v" 命令启动可视模式，然后把光标移到要拷贝文本的结尾处，输入 "y" 拷贝文本。
例如，要拷贝上面这段文字，你可以执行: >

	:edit thisfile
	/This
	vjjjj$y

现在编辑你要粘贴文本的文件。把光标移到你要插入文本的地方。用 "p" 命令把文本粘贴到那里:
 >
	:edit otherfile
	/There
	p

当然，你可以用任何命令拷贝文本。例如，用 "V" 命令选中整行的内容。或者用 CTRL-V 选择一个矩形列块。或者使用 "Y" 拷贝一个单行，"yaw" 拷贝一个单词等。
   "p" 命令把文本粘贴到光标之后，"P" 命令则粘贴到光标之前。注意， Vim 会记住你拷贝的是一整行还是一个列块，并用相同的方式把文本贴出来。


使用寄存器

当你需要拷贝一个文件的几个地方到另一个文件，用上面的方法，你就得反复在两个文件间跳来跳去。要避免这种情况，你可以把不同的文本拷贝到不同的寄存器中.
  寄存器是 Vim 用来保存文本的地方。这里我们使用名称为 a 到 z 的寄存器 (后面我们会发现还有其它寄存器)。让我们拷贝一个句子到 f 寄存器 (f 表示 First): >

	"fyas

"yas" 命令像以前说过是拷贝一个句子，而 "f 告诉 Vim 把文本拷贝到寄存器 f。这必须放在拷贝命令的前面.
  现在，拷贝三个整行到寄存器 l (l 表示 line): >

	"l3yy

计数前缀也可以用在 "l 的前面。要拷贝一个文本列块到寄存器 b (代表 block) 中: >

	CTRL-Vjjww"by

注意 "b 正好在 "y" 命令的前面，这是必须的。把它放在 "w" 命令的前面就不行。
  现在你有了在寄存器 f，l 和 b 有三段文本。编辑另一个文件，并移到要插入文本的地方: >

	"fp

同样地，寄存器标识符 "f 必须在 "p" 命令的前面。
  你可以用任何顺序粘贴寄存器的内容。并且，这些内容一直存在于寄存器中，直到你拷贝其它文件到这个寄存器中。这样，你可以粘贴任意多次。

删除文本的时候，你也可以指定寄存器。使用这个方法可以移动几处文本。例如，要删除一个单词并写到 w 寄存器中: >

	"wdaw

同样地，寄存器标识符必须在删除命令 "d" 的前面.


添加到文件

如果要把收集的行都放到一个文件里，你可以使用: >

	:write >> logfile

此命令会把当前文件内容写入到 "logfile" 末尾. 这样实现了文件添加功能。这样使你免去了拷贝，编辑和拷贝的过程，省了两步。但你只能加到目标文件的末尾
要只拷贝一部分内容，可以先用可视模式选中这些内容后在执行 ":write"。在第 10 章，你将学会选中一个行范围的办法        

==============================================================================
*07.6*	查看文件

有时你只想查看文件的内容而不是修改它.不用考虑使用 ":w" 是危险的并且会覆盖源文件.避免它使用只读模式编辑文件.使用这个命令开启只读模式: >

	vim -R file

在 Unix，如下命令可以完成相同的功能: >

	view file

现在，你就在用只读模式阅读这个文件 "file" 了。但你执行 ":w" 命令的时候，你会得到一个禁止写入的错误信息。
当你试图修改这个文件时，Vim 会给你一个告警提示:

	W10: Warning: Changing a readonly file ~

即使这样，你的修改还是会被接纳的。有可能你只是想排列这些文本，以便阅读.
  如果你确实要改动这个文件，在 write 命令前面加上 ! 可以强制写入。
  
如果你的确想禁止文件修改，用这个命令: >

	vim -M file

现在任何对文件的修改操作都会失败。例如，帮助文件就是这样的。如果你要在上面作修改，你会得到一个错误提示:

	E21: Cannot make changes, 'modifiable' is off ~

你能使用 -M 参数使 Vim 在只读模式工作. 这个方式仍然取决于用户的意愿，因为你可以用下面的命令去掉这层保护:

	:set modifiable
	:set write

==============================================================================
*07.7*	改变文件名

开始编辑新文件的一个聪明的方法是使用一个现有的包含大部分你需要的东西的文件。例如，你开始编写一个新程序移动文件。你知道你已经有了一个复制文件的程序，因此你可以这样开始: >

	:edit copy.c

你不需要删除原来的内容，只要保存为一个新名字. ":saveas" 命令可以使用在这里: >

	:saveas move.c

Vim 会用给定的名称保存文件，并开始编辑该文件.这样，下次你用 ":write"，写入的时候，被写入的就是 "move.c"。而 "copy.c" 不会被改变.
  当你想改变当前文件的文件名，但不想立即保存它，用这个命令: >

	:file move.c

Vim 会把这个文件标记为 "not edited"。这表示 Vim 知道你现在编辑的文件不是原来那个文件了。当你写这个文件的时候，你会得到如下错误信息:

	E13: File exists (use ! to override) ~

这可以避免你不小心覆盖另一个文件.

==============================================================================

下一章: |usr_08.txt|  分割窗口

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
