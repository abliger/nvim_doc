*usr_03.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar
                                  译者: abliger      
			     移动


在你插入或者删除之前，你需要移动到合适的位置。Vim 有一大堆命令可以移动光标。本章向你介绍最重要的那些.你可以在|Q_lr|中找到这些命令的列表.

|03.1|	词移动
|03.2|	移动到行首或行尾
|03.3|	移动一个字符
|03.4|	括号匹配
|03.5|	移动到指定行
|03.6|	确认当前位置
|03.7|	滚动
|03.8|	简单搜索
|03.9|	简单搜索模式
|03.10|	使用标记

下一章: |usr_04.txt|  做小改动
上一章: |usr_02.txt|  Vim初步
目录:   |usr_toc.txt|
                                                               

==============================================================================
*03.1*	词移动

移动光标向前跳一个单词,使用 "w" 命令.像大多数 Vim 命令一样，你可以在命令前加数字前缀表示把这个命令重复多次.例如, "3w" 移动三个单词.下面的图形展现了它如何工作的(从 "x" 的位置开始):

	This is a line with example text ~
	  x-->-->->----------------->
	   w  w  w    3w

注意如果光标在单词的开始,"w" 会移动到下一个单词的开始."b" 命令移动到前一个单词的字首:

	This is a line with example text ~
	<----<--<-<---------<--x
	   b   b b    2b      b

也有 "e" 命令移动到下一个单词的字尾和"ge"命令移动到前一个单词的字尾:

	This is a line with example text ~
	   <----<----x---->------------>
	   2ge   ge     e       2e

如果你在一行的最后一个单词,使用 "w" 命令将会移动下一行第一个单词.因此你可以使用这个命令去移动段落,它比 "l" 快的多."b" 在反方向完成此功能.

一个单词以非单词字符结尾, 诸如 ".", "-" or ")".要改 变Vim 对于单词的判断, 查看 'iskeyword' 选项.如果你想直接在帮助中尝试它,'iskeyword' 需要重新设定，示例才能工作: >

	:set iskeyword&

尽可能使用空格分开单词.这不是通常意义的单词,这也是我们为什么使用大写.按字串移动的命令也全都是大写,像下图这样: 

	       ge      b	  w				e
	       <-     <-	 --->			       --->
	This is-a line, with special/separated/words (and some more). ~
	   <----- <-----	 -------------------->	       ----->
	     gE      B			 W			 E

组合使用小写和大写命令,你能在段落快速向前向后移动.

==============================================================================
*03.2*	移动到行首或行尾

"$" 命令移动光标到行尾.如果你的键盘有 <End> 键它将做相同的事.

"^" 命令移动到此行第一个非空字符处."0" 命令使光标移动到行首第一个字符和 <Home> 做了同样的事.  如下("." 代表空格):

		  ^
	     <-----------x
	.....This is a line with example text ~
	<----------------x   x-------------->
		0		   $

("....."这里表示空格)

像大多数移动命令,"$" 命令可以接受数量前缀.但是移动到一行的行尾 n 次没有什么意义.因此它会是光标移动到其他行e.例如,"1$" 移动到当前行的行尾，而 "2$" 则移动到下一行的行尾，如此类推.
"0" 命令不接受数量前缀,因为 "0" 已经是数字了.出人意料的是，使用数字到 "^" 没有反应.

==============================================================================
*03.3*	移动一个字符

最有用的移动命令是单字符查找命令.这个命令 "fx" 向前查找单字符x.提示: "f" 表示 "Find".
例如,你在下面例子的开始.假定你想要去 human 的 h.只使用 "fh" 光标将会定位到 h:


	To err is human.  To really foul up you need a computer. ~
	---------->--------------->
	    fh		 fy

你也能看到,"fy" 会移动到单词 really 的结尾.
你也可以添加数量修饰;所以你如果找 "foul" 的 "l" 可以使用 "3fl":


	To err is human.  To really foul up you need a computer. ~
		  --------------------->
			   3fl

"F"命令是向左查询:

	To err is human.  To really foul up you need a computer. ~
		  <---------------------
			    Fh

"tx" 命令很像 "fx" 命令,除了它只把光标移动到目标字符的前一个字符上.提示: "t" 代表 "To".这个命令的反向版本是 "Tx".

	To err is human.  To really foul up you need a computer. ~
		   <------------  ------------->
			Th		tn

这四个命令可以通过 ";" 重复."," 反向重复.无论用哪个命令，光标永远都不会移出当前行，哪怕这两行是连续的一个句子.

有时你启动了一个查找命令后才发现自己执行了一个错误的命令.如你键入了 "f" 之后意识到你想要键入 "F".想要打断查询，可以键入 <Esc>.所以 "f<Esc>" 是一个打断向前查找并不做任何事情.注意: <Esc> 能取消大部分操作，不只是查询.

==============================================================================
*03.4*	括号匹配

当你经常写程序会遇到嵌套的 () 结构.此时 "%" 命令是非常有用的: 它会移动到匹配的括号上.如果光标在一个 "(" 它将会移动匹配的 ")" 上.如果它在 ")" 它将移动到 "(" 上.

			    %
			 <----->
		if (a == (b * c) / d) ~
		   <---------------->
			    %

它也能在 [] 和 {} 上工作.(可用 'matchpairs' 选项定义.)

当光标不在有用的字符上时, "%" 将会向前查抄一个有用的字符.因此如果光标在例子的行首, "%" 会向前查找第一个 "(".然后它移动到匹配的字符上:

		if (a == (b * c) / d) ~
		---+---------------->
			   %

==============================================================================
*03.5*	移动到指定行

如果你是一个 C 或者 C++ 程序员，你对下面这样的错误信息非常熟悉:

	prog.c:33: j   undeclared (first use in this function) ~

它告诉你在33 行你需要进行修改一些东西.所以你要怎么去第 33 行? 一种方法是使用 "9999k" 回到文件头再使用 "32j" 向下移动 32 行.这不是一个好方法,但它可以工作.更好的方式是使用 "G" 命令. 使用数字,这个命令会让光标定位到你指定的行.例如, "33G" 把你带到 33 行.  (要用更好的方法在编译器的错误列表中移动,见 |usr_30.txt|, 的 :make 命令部分.)
如果没有计数前缀,"G" 会定位到文件尾.快速定位到文件首可以使用 "gg"."1G" 也会做相同的事,但却要打更多字符.

	    |	first line of a file   ^
	    |	text text text text    |
	    |	text text text text    |  gg
	7G  |	text text text text    |
	    |	text text text text
	    |	text text text text
	    V	text text text text    |
		text text text text    |  G
		text text text text    |
		last line of a file    V

另一个定位行的方法是使用带计数前缀的 "%" 命令.例如 "50%" 会移动到文件中间,"90%" 会移动到接近文件未的位置.

前面的描述假定你想移动到文件中的某一行，而不在乎它是否可见。那么如何移动到视野之内的一行呢？下图演示了三个可以使用的命令:

			+---------------------------+
		H -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		M -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		L -->	| text sample text	    |
			+---------------------------+

提示: "H" 代表 Home, "M" 代表 Middle 和 "L" 代表 Last.另外一种记法,"H" 代表 high, "M" 代表 Middle 和 "L" 代表 low.

==============================================================================
*03.6*	确认当前位置

如果查看你在文件的位置，有三种方法:

1.  使用 CTRL-G 命令.你可以获得下面的信息(假定 'ruler' 选项是 off):

	"usr_03.txt" line 233 of 650 --35%-- col 45-52 

    它显示了你编辑的文件名，光标所在的行号，总行数和光标再文件中行号占比.
    有时你能看到分开的行号.例如, "col 2-9".这表示光标处于第二个字符上，但由于使用了制表符，在屏幕上的位置是 9.

2.  设置 'number' 选项.这会再每一行前面显示行号: >

	:set number
 
<    要重新关闭这个选项: >

	:set nonumber
 
<    因为 'number' 是一个 boolean 选项, 关闭它既加上前缀 "no".boolean 选项只有两个值,on 或 off.
    Vim 有很多选项.  在 boolean 选项外还有数字选项和字符串选项.在用到的时候会给出一些例子的.

3.  设置 'ruler' 选项.  这会再Vim窗口的右下角显示当前光标的位置:

	:set ruler

使用 'ruler' 选项的好处是它不占多少地方,从而可以留下更多的地方给你的文本.

==============================================================================
*03.7*	滚动

CTRL-U 命令向下滚动半屏.想象一下通过窗口查看文本并且移动该窗口一般的高度.因此窗口移动到当前文字的上面，而文字则移到窗口的下面。不用担心记不住那边是上。很多人都是这样.
CTRL-D 命令把窗口命令把视窗向下移动半屏，所以把文字向上移动半屏.

				       +----------------+
				       | some text	|
				       | some text	|
				       | some text	|
	+---------------+	       | some text	|
	| some text	|  CTRL-U  --> |		|
	|		|	       | 123456		|
	| 123456	|	       +----------------+
	| 7890		|
	|		|	       +----------------+
	| example	|  CTRL-D -->  | 7890		|
	+---------------+	       |		|
				       | example	|
				       | example	|
				       | example	|
				       | example	|
				       +----------------+

每次滚动一行可以使用 CTRL-E (向上)和 CTRL-Y (向下).可以认为 CTRL-E 给了你额外的一行.  (如果你使用 MS-Windows 兼容的按键映射 CTRL-Y 会使用重做代替滚动.)

正向滚动整屏(减去两行)使用 CTRL-F.相反的使用 CTRL-B.应该很容易记住: F 代表 Forwards 和 B 代表 Backwards.

有一个问题是当向下移动很多行时在使用 "j" 你的光标是在屏幕的最下面.而你可能想要看到光标所在行的内容.这可以使用 "zz" 命令实现.

	+------------------+		 +------------------+
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |   zz  -->	 | line with cursor |
	| earlier text	   |		 | later text	    |
	| earlier text	   |		 | later text	    |
	| line with cursor |		 | later text	    |
	+------------------+		 +------------------+

"zt" 命令把光标所在行放到顶部, "zb" 放在底部.有很多滚动命令, 见 |Q_sc|.要使一些行的内容总是保持在光标周围,使用 'scrolloff' 选项.

==============================================================================
*03.8*	简单搜索

搜索一个字符串,使用 "/string" 命令.例如,查找单词 include,使用命令:  >

	/include

你会注意到当你键入 "/" 时光标会想冒号命令一样跳转到Vim窗口的最后一行.那是你键入单词.你可以使用空格键(方向键和 <BS>)去更正错误.使用 <Left> 和 <Right> 当你需要的时候.使用 <Enter> 执行命令.

	注意:
	字符.*[]^%/\?~$ 有特殊含义.如果你想要在查找时找到它们，你必须使用 \ 符号在输入前转义它们。见下面.

使用 "n" 命令查找下一个匹配的字符串.使用下面的命令去发现光标后第一个 #include: >

	/#include

然后键入几次 "n".你会在之后的文本中找到每一个 #include.如果你知道匹配的次数可以在这个命令前面增加计数前缀.因此 "3n" 是第三个匹配的位置置.你也能在 "/" 前添加数量: "4/the" 会找到第四个匹配 "the" 的位置.

"?" 命令像 "/" 但是是反方向查找: >

	?word

"N" 命令反方向重复查找.因此在 "/" 命令后,使用 "n" 反方向查找,在 "?" 后使用 "N" 正向查找.

忽略大小写

通常，你需要正确的键入你想要查找的内容.如果你不关心单词的大写或者小写,可以查看 'ignorecase' 选项: >

	:set ignorecase

如果你想查找 "word", 它 也会匹配 "Word" 和 "WORD".如果要进行区分使用下面的命令: >

	:set noignorecase


历史

加入你做了三次查询: >

	/one
	/two
	/three

现在我们输入"/" 进行简单的查找，但先不使用 <Enter>.如果你使用 <Up> (上箭头),Vim 会把 "/three" 放到你的命令行上. 使用 <Enter> 会在当前位置查找 three.如果你没有使用 <Enter>,继续使用 <Up>,Vim 会显示 "/two".继续使用 <Up> Vim 显示 "/one".
   如果你使用 <Down> 会在历史记录钟反向查找.

如果你知道之前正则表达式的开头,并且你想要再一次使用它,在使用 <Up> 前先键入正则表达式的前几个字符.例如,你可以键入 "/o<Up>" 会在命令行上显示 "/one".

使用":" 开头的命令也有历史记录.这会让你能取到之前的命令并执行它.这两种历史记录是分开的.


在文本中查找单词 

假如你在文本中看到一个单词 "TheLongFunctionName" 并且找到下一个相同的单词.你可以键入 "/TheLongFunctionName",但是这样做会输入很多字符.并且如果输错了，Vim 是不可能找到你要找的单词的。
   有一种简单的方法解决: 让光标移动到你要查询的单词上并且使用 "*" 命令.Vim将会抓取在光标下的单词并且使用它 作为查询字符串.
   "#" 命令反方向做同样的事.你可以添加一个数字前缀: "3*" 查询光标下第三次出现的相同单词.


查找整个单词

如果你键入"/the" 它可能会匹配"there".只要查找"the"可以使用: >

	/the\>

"\>"是一个只匹配单词结尾的特殊符号.同样的还有"\<"只匹配单词的开头.因此只查询单词 "the"使用: >

	/\<the\>

这就不会匹配 "there" 或 "soothe".注意使用 "*" 和"#" 命令使用了词首词尾标记整个单词(你可以使用 "g*" 和 "g#" 去部分匹配).


高亮匹配

当你编辑程序时，你看到一个叫 "nr" 的变量.你想要查看它在哪里使用到.你可以移动光标到 "nr" 然后使用 "*" 命令，然后使用 "n" 命令遍历所有的匹配项.

Vim 会高亮所有的匹配项。这是一个查看所有变量使用的好方法，而且还不需要键入命令。
   关掉此功能使用: >

	:set nohlsearch

如果你想要下一次查询时使用高亮，你可以这样启用它: >

	:set hlsearch

如果你想要移除高亮: >

	:nohlsearch

它没有复位设置.实际上, 它只是关闭了高亮.当你再一次进行查询时，高亮会再次出现。对于 "n" and "N" 命令也成立.


调节查询

有一些改变查询工作方式的选项.有一些重要的选项:
>
	:set nowrapscan

查询到文件尾后停止查询.或者当你反相向查找时，它在文件首停止查询.'wrapscan' 选项时默认开启的,所以在找到文件尾的时候会自动折返到文件头.
>
	:set noincsearch

这会在你键入查询内容时不展示匹配项.

插曲

如果你喜欢之前提及的选项,你不想在每次使用 Vim 的时候设置它,你可以把这些命令放到 Vim 的开始文件中.编辑这个文件,例如:

	:edit ~/.config/nvim/init.vim

然后在文中加一行命令来设置这些选项，就好像你在 Vim 中输入一样，例如: >

	Go:set hlsearch<Esc>

"G" 移动到文件尾.  "o" 新建一行，然后在哪里输入 ":set" 命令.然后使用 <Esc> 结束插入模式.保存关闭文件:

	ZZ

如果重新打开 Vim，'hlsearch' 已经被设置了.

==============================================================================
*03.9*	简单搜索模式

Vim 使用正则表达式去要求查找内容.正则表达式时一种非常强大的并且紧凑轻易查询模式的方法.但是非常不幸，这种强大的功能是有代价的，因为使用它需要掌握一些技巧.
   本章我们只介绍一些基本的正则表达式。要了解更多的关于查找模式和命令，请参考 第 27 章 |usr_27.txt|.这里你能知道所有的正则描述: |pattern|.

行首和行尾

^ 字符匹配一行的开始.在英语键盘上你能在数字 6 上找到它.模式 "include" 匹配在一行上任意位置的单词 include.但是使用模式 "^include" 只匹配行首单词是 include的.
   $字符只匹配行尾.因此,"was$" 只匹配行尾单词是 was 的.

让我们使用 "x" 标记出 "/the" 在例子中匹配的地方:

	the solder holding one of the chips melted and the ~
	xxx			  xxx		       xxx

如果使用"/the$"是这样:

	the solder holding one of the chips melted and the ~
						       xxx

如果使用"/^the"是这样:
	the solder holding one of the chips melted and the ~
	xxx

你可以使用 "/^the$" 去查找; 它会只匹配完全由 "the" 构成的单行.空格并不会被匹配,因此如果一个单词后面有空格,向 "the ",这个模式不会匹配.

匹配单个字符

. (点)会和任何字符匹配.例如,模式 "c.m" 会匹配一个字符串.这个字符串的第一个字符是 c,第二个字符没有限制,第三个字符是 m.例如:

	We use a computer that became the cummin winter. ~
		 xxx		 xxx	  xxx


匹配特殊字符

如果你真的想要匹配一个点,你必须在它之前，使用反斜线避免特殊含义.例如如果你要搜索 "ter.",你会发现这些匹配项:

	We use a computer that became the cummin winter. ~
		      xxxx			    xxxx

S 使用 "ter\." 只会匹配第二个匹配项.

==============================================================================
*03.10*	使用标记

当你使用 "G" 命令去跳转到一个地方时,Vim 会在跳转前记住这个地方.这个地方叫做标记.使用这个命令回到原来的地方: >

	``
<
` 是一个反引号.如果你第二次使用，他会再次跳转到原来的位置.这是因为 "`" 命令自身就是一个跳转,并且在使用 "`" 跳转前已经标记了该位置.一般地,每次你执行的会将光标移动到本行之外的命令都叫跳转.这包狂查询命令 "/" 和 "n" 命令(无论多远).但不包括 "fx" 和 "tx" 和单词移动 "w" 和 "e".此外, "j" 和 "k" 也不认为是一个跳转,甚至是使用数字去修饰它们也不行.

"``" 命令可以前后跳转.CTRL-O 命令会跳转到较老的位置(提示: O 代表 older).  CTRL-I 跳转到较新的位置(提示: 在普通的键盘布局中，I 紧挨着 O).考虑如下命令: >

	33G
	/^The
	CTRL-O

你第一次跳转到 33 行，然后查询以 "The" 单词开始的行.然后使用 CTRL-O 回 到33 行.再次执行 CTRL-O 回到开始的地方.如果你现在使用 CTRL-I 你又会回到 33 行.再次使再次使用用 CTRL-I 回到 The 的地方.


	     |	example text   ^	     |
	33G  |	example text   |  CTRL-O     | CTRL-I
	     |	example text   |	     |
	     V	line 33 text   ^	     V
	     |	example text   |	     |
       /^The |	example text   |  CTRL-O     | CTRL-I
	     V	There you are  |	     V
		example text

       注意:
	CTRL-I 等同 <Tab>.

":jumps" 命令会给你跳转过的列表.最后一个使用过的标记会用 ">" 标记出来.


名称标记							*bookmark*

Vim 允许你在文本中添加自己的标记.使用命令 "ma" 让光标之下的位置当作 标记 a.你能放置 26 个标记(a 到 z).这些标记是不可见的，只是一个由 Vim 记住的位置.
跳转到标记,使用命令 `{mark}，这里的 {mark} 是指标记 字母.因此移动标记的命令是:
>
	`a

命令 "'mark" (单引号加标记字符)会移动到标记所在行的行首.与 "`mark" 命令不同的是,它会同时移动到标记的列上.

标记在需要处理一个文件的两个相关地方的时候非常有用。假设你在处理文件末的时候需 要查看文件首的一些内容。
    先移动到文件首，设置一个标记 s (start，开始): >

	ms

然后在你需要处理的地方放置标记 e(end): >

	me

现在你可以随意移动，当你需要看开头的地方，可以使用这个命令移到那里: >

	's

然后你可以使用 '' 跳转回来,或者使用 'e 跳转到你需要处理的的地方.
	 这里使用 s 和 e 作标记名没有特别的含义，只是为了好记而已。

你可以使用这个命令获得标记列表列表: >

	:marks

你会注意到有一些特殊的标记，包括:

	'	跳转前光标的位置	
	"	最后编辑的光标位置	
	[	最后改变的开始位置	
	]	最后改变的结束位置	

==============================================================================

下一章: |usr_04.txt|  做小改动

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
