*usr_04.txt*	Nvim

		     VIM 用户手册 - by Bram Moolenaar
                                  译者: abliger                   
			     做小改动


此章节会介绍几个修正和移动文本的方法.会教你三种改变文本的基本方法: 操作移动, 可视模式和文本对象.

|04.1|	操作和动作
|04.2|	改变文本
|04.3|	重复一个修改
|04.4|	可视模式
|04.5|	移动文本
|04.6|	复制文本
|04.7|	使用剪切板
|04.8|	文本对象
|04.9|	替代模式
|04.10|	总结

下一章: |usr_05.txt|  自定义配置
上一章: |usr_03.txt|  移动
目录:   |usr_toc.txt|

==============================================================================
*04.1*	操作符和动作

在章节 2，你学会使用 "x" 命令去删除单个字符.和使用: "4x" 删除四个字符."dw" 命令会会删除一个单词.你可能会意识到"w"命令 是移动单词的命令.实际上"d"命令可以跟随任何移动命令,并且它会删除从光标当前位置到目标位置的全部内容.
例如，"4w" 命令,光标向后移动四个单词."d4w" 命令会向后删除四个单词.

	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~

Vim 会删除到光标的前一个位置.这是因为 Vim 知道你可以不想要删除单词的第一个字符.如果你使用 "e" 命令去移动到单词的结束,Vim 会猜测你想要删除最后一个字符:

	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~

是否包含光标所在字符取决于你使用的移动命令.当字符不包含其中，我们叫做"非包含的"相反是"包含的".

"$" 命令移动到行尾."d$" 命令会从光标到行尾的所有内容都删除.他是一个包含动作,因此最后一个字符也会删除:

	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~

这就是操作符动作组合模式.首先键入操作命令.例如,"d" 是删除操作符.然后键入移动命令像 "4l" 或 "w".使用这种方式你可以操作任何动作命令中的文字.

==============================================================================
*04.2*	改变文本

另一个操作符是 "c",改变命令.它的行为有点像 "d" 除了它会使你进入插入模式.例如, "cw" 修改一个单词.更具体的说,它是删除一个单词然后使你进入插入模式.

	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~

"c2wbe<Esc>"包含以下操作:

	c	修改操作符
	2w	向后移动两个单词(单词会被删除并且进入插入模式)
	be	插入be
	<Esc>	返回正常模式

你会发现一个奇怪的地方: human 前面的空格没有被删除。有一句谚语说道: 任何问题都 有一个简单，清楚但错误的回答。"cw" 命令就属于这种情况。c 操作符在很多地方都和 d 一样，但有一个例外，"cw"。它实际上像 "ce" 一样，删除到单词尾。这样单词后面的 空格就不包括在内了。这要追溯到使用 Vi 的旧日子。由于很多人已经习惯了这种方式， 这个不一致之处就留在 Vim 里了.

更多修改命令

像 "dd" 删除整行, "cc" 修改整行.它会保持缩进.

就像 "d$" 删除到行尾, "c$" 会修改到行尾.相当于 "d$" 删除文本后使用 "a" 进入插入模式以便插入文字.


快捷键

一些操作移动命令经常用到，所以设置为单字符命令:

	x  代表dl  (删除光标后的一个字符)
	X  代表dh  (删除光标前的一个字符)
	D  代表d$  (删除到行尾)
	C  代表c$  (修改到行尾)
	s  代表cl  (修改一个字符)
	S  代表cc  (修改 整行)


在哪里放置数字修饰符

命令 "3dw" 和 "d3w" 删除三行.如果你真的解决整个问题,那么命令 "3dw",是删除一个单词重复三次;命令 "d3w" 删除三个三次一次.这是一个没有区别的区别.实际上你也可以添加两个数字,例如, "3d2w" 删除两个单词三次总共六个单词.

替换单个字符

"r" 命令不是一个操作符.他等待你输入一个字符,并使用它替代光标下的字符.你能使用 "cl" 或者 "s" 命令做相同的事,但是使用 "r" 你不需要使用 <Esc> 返回正常模式.

	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~

使用数量修饰 "r" 会造成向后的n个字符用相同的字符替代.例如:

	There is something wrong here ~
			   5rx

	There is something xxxxx here ~

如果要使用回车符替换，可以使用 "r<Enter>".删除一个字符并插入换行符.使用数字前缀会删除多个字符，但只插入一次换行符: "4r<Enter>" 使用一个换行符替代四个字符.

==============================================================================
*04.3*	重复一个修改

"." 命令在 Vim 中是一个简单且有效的命令之一.它会重复最后一次修改.比如,假设编辑一个 HTML 文件并且想要删除所有的 <B>  标签.你的位置再第一个 < 使用 "df>" 去删除整个 <B> 标签.然后你去下一个 < 符号但位置,再使用 "." 命令删除它."." 命令会执行最后一次修改(本例就是, "df>").

			      To <B>generate</B> a table of <B>contents ~
	f<   find first <     --->
	df>  delete to >	 -->
	f<   find next <	   --------->
	.    repeat df>			    --->
	f<   find next <		       ------------->
	.    repeat df>					    -->

"." 命令会对你所有的改变有效，除了 "u" (回退), CTRL-R (重做)和以冒号开始的命令.

其他例子: 你想要改变单词 "four" 为"five".它在你的文本中出现好几次，你可以使用下面的命令快速操作:

 	/four<Enter>	找到第一个字符串 "four"
	cwfive<Esc>	修改单词为 "five"
	n		找到下一个 "four"
	.		重复修改 "five"
	n		找到下一个 "four"
	.		重复修改，如此类推.

==============================================================================
*04.4*	可视模式

删除一些简单的事项操作移动模式完成的很好.但是常常移动到你想要修改的位置事不容易的.那么你就可以使用可视模式.

可以使用 "v" 开启可视模式.你可以移动光标到你想要修改的文字上.当你如此做后，文字就会高亮.最后键入操作命令.例如,删除从一个单词的中间到另一个单词的中间部分:

		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~

你真的不需要算需要数出按压 "l" 的次数.  当你按压 "d" ,就可以立刻看到选中的文字被删除.

如果你改变了注意，使用 <Esc> 退出可视模式.

按行选择

如果你想选择整行,使用 "V" 进入可视模式.你可以看到整行都会高亮，上下移动后整行都会被高亮.左右移动不会做任何事.例如,使用 "Vjj" 选择三行:

			  +------------------------+
			  | text more text	   |
		       >> | more text more text    | |
	selected lines >> | text text text	   | | Vjj
		       >> | text more		   | V
			  | more text more	   |
			  +------------------------+


块选择

如果你想处理矩形字符,使用 CTRL-V 进入可视模式.这对于表格是很有用的.

		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334

删除中间的 "Q2" 列,把光标移动到 "Q2" 的 "Q".使用 CTRL-V 开启块可视模式.使用 "3j" 向下移动三行并且使用 "w" 移动到下一个单词.你可以看到最后一列的第一个字符是高亮的.排除它,使用 "h".现在使用 "d" 中间的列消失了.

光标移动到另一边

如果你在可视模式选中了一些文字,然后你发现你需要去修改被选中文字的另一边,可以使用 "o" 命令 (提示: o 表示 other end).光标会移动到另一边。再移动到选中区域开始的地方，再次使用 "o" 回到另一端.


使用块选择时有四个角."o" 只能进行对角跳转.使用 "O" 让你移动到行的另一边.

注意 "o" 和 "O" 在可视模式的运行不同于正常模式, 正常模式下它们会在光标下上创建新的一行.

==============================================================================
*04.5*	移动文本

当你使用 "d", "x",或者其他的命令删除一些东西时,文字会被保存.你可以使用 "p" 命令粘贴它.  (p 代表 put 放置).
   看一下它是如何工作的.首先把光标放到你想要删除的行键入 "dd" 删除整行.之后把光标移到你想到移动的地方使用 "p" (放置)命令.会在光标下面插入删除的行.

	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2

因为你删除的是一整行,"p" 命令会使删除行出现在光标下面.如果你删除的是行的一部分(比如，一个单词),"p" 命令会把它放置到光标后.

	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 ------->
			    welp

	Some more boring text to try out commands. ~

更多关于黏贴的东西
                                                                                                       
"P" 命令像 "p" 命令,但是是放置在光标前.当你使用 "dd" 删除整行, "P" 会把它插入到光标上面的一行.当你使用 "dw" 删除单词, "P" 会把它放置到光标之前.

你可以重复执行它，每次黏贴会使用相同的文本.

你可以在 "p" 和 "P" 前使用数字前缀.数字表示重复黏贴的次数.因此使用 "dd" 然后使用 "3p" 会把删除行黏贴三次.

交换两个字符

肯定经常出现，在你输入是手比脑快(或者相反?).这样的结果是想要输入 "the" 却输入为 "teh".Vim 可以很简单的纠正错误.把光标放到 "teh" 的 "e" 执行命令 "xp".它是这样工作的: "x" 删除字符e并把它放到寄存器."p" 把字符放到光标后面.

	teh     th     the ~
	 x       p

==============================================================================
*04.6*	复制文本

你能使用 "u" 去回退删除的部分然后使用 "p" 把它黏贴到任何地方已完成从一处到另一处的拷贝. 但抽出（yanking ）方法是更简单的."y" 操作符把文本放到寄存器.然后使用 "p" 命令去黏贴它.
   抽出（Yanking ）是拷贝在 Vim 的另一个名字.因为 "c" 字母已经被修改操作符占用,"y" 还是可用的.叫操作符 "yank" 使它更容易记住 "y" 键.

因为 "y" 是一个操作符,使用 "yw" 去拷贝一个单词.当然数字前缀也是有效的.拷贝连个单词 "y2w".例如:

	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

注意 "yw" 拷贝是包括单词前的空格.如果你不想要这样可以使用 "ye".

"yy" 命令拷贝整行,就像 "dd" 删除整行.

	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line

"Y" 本来是"拷贝所在行",但为了和删除到行尾的 "D" 命令一致. "Y" 因此修改成 "拷贝到行尾"，使之能与 D 命令逻辑一致.

==============================================================================
*04.7*	使用剪切板

如果你使用 Vim 的 GUI 版本,你可能发现 "Copy" 在"Edit"菜单中.首先在可视模式选择文本，然后使用编辑菜单.现在被选择的文本拷贝到了剪切板.你能黏贴文本到其他地方.

如果已有文本在剪切板中,你可以在 Vim 的编辑菜单中使用黏贴它.在正常模式和插入模式会正常工作.在可视模式剪切板的文本会替换被选中的文本.

"Cut" 菜单会在文本放到剪切搬前删除它.

如果你没有使用GUI,后者如果你不喜欢使用菜单,那么只能使用其他方式.你可以使用下面的方式把一整行拷贝到剪切板中: >

	"*yy

从剪切板黏贴: >

	"*p

这仅在支持剪贴板的 Vim 版本中才能工作。关于剪贴板的更多内容请参见 |09.3| 和 |clipboard|.

==============================================================================
*04.8*	文本对象

如果光标在单词的中间且你想删除那个单词,在你使用 "dw" 前你需要移动光标到单词的词首."daw" 这种方式可能更简单.

	this is some example text. ~
		       daw

	this is some text. ~

"daw" 的 "d" 是删除操作符."aw" 是文本对象.提示: "aw" 代 表"A Word".因此 "daw" 表示 "删除一个单词(Delete A Word)". 注意单词后的空格也会被删除(或者在行尾删除单词前面的单词).

使用文本对象是在 Vim 第三种改变方式.我们已经介绍了操作符移动模式和可视模式.现在我们添加一个操作文本对象.和操作移动模式一样, 但它不是操作于从当前位置到移动目标间的内容， 而是对光标所在位置的文本对象进行操作。文本对象是作为一个整体来处理的。现在光标在对象中的位置无关紧要。
使用 "cis" 改变整句话.如:

	Hello there.  This ~
	is an example.  Just ~
	some text. ~

移动到第二行开始处 "is an".使用 "cis":

	Hello there.    Just ~
	some text. ~

光标会到第一行的空白位置.键入 "Another line.":

	Hello there.  Another line.  Just ~
	some text. ~

"cis" 是由 "c" (change) 操作符和 "is" 文本对象组成."is" 代表 "Inner Sentence".还有一个文本对象是 "as" ("A Sentence").不同点在于 "as" 包括句子后的空格而 "is" 不包含.如果你要删除句子, 你一定会同时删除句尾空格,那么就使用 "das".如果你要替换句子就使用 "cis" 更好.

你能在可视模式使用文本对象.这样会选中一个文本对象，而且继续留在可视模 式，你可以继续多次执行文本对象命令.例如,开始可视模式，使用 "as" 选择一句话.现在重复执行 "as"，就会继续选中更多的句子。最后你可以使用一个操作符去处理这些被选中的句子。
你可以在这里找到一个详细的文本对象的列表: |text-objects|.

==============================================================================
*04.9*	替代模式

"R" 命令会让 Vim 进入代替模式.在此模式,你输入的每一个字符都会代替光标下的字符.直到键入 <Esc>.在此例中你在 "text" 第一个字符 "t" 上开启替代模式:

	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~

你可能注意到命令使用两倍的内容替换了 5 个字符.因为 "R" 命令会自动拓展行，而不是替换到下一行.

你可以使用 <Insert> 键在插入模式和替代模式进行切换.

当你使用 <BS> (空格键)进行修改时,你会之一到以前的字符回来了.这就像回退命令.

==============================================================================
*04.10*	总结

操作符, 移动命令和文本对象可以有多种组合.
在这寻找操作的列表: |operator|.

例如,有很多方式去删除文本:

x	删除光标后的一个字符(既"dl")
X	删除光标前的一个字符(机"dh")
D	删除到行尾(既"d$")
dw	向后删除一个单词
db	向前删除一个单词
diw	删除光标下的单词(不包括空格)
daw	删除光标下的单词(包括空格)
dG	删除到文件未
dgg	删除到文件头

如果你用 "c" 代替 "d"，这会变成修改命令；而改用 "y"，则变成拷贝命令，等等.

还有一些常用的进行修改的命令，放在哪一章都不合适，列在这里:

	~	修改光标下字符的大小写，并移动到下一个字符。这不是一个操作符 (除非设置了 'tildeop')，所以你不能连接一个动作命令。这个命令在 可视模式下也有效，它会改变被选中的所有文本的大小写。

	I	移到当前行的第一个非空字符并启动插入模式。

	A	移动到行尾并启动插入模式。

==============================================================================

下一章: |usr_05.txt|  自定义配置

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
